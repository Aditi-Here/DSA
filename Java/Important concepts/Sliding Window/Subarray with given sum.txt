Find Subarray with given Sum from Array of non-negative Numbers

Given a 1-based indexing array arr[] of non-negative integers and an integer sum. You mainly need to return the left and right indexes(1-based indexing) of that subarray. In case of multiple subarrays, return the subarray indexes which come first on moving from left to right. If no such subarray exists return an array consisting of element -1.

https://www.geeksforgeeks.org/find-subarray-with-given-sum/#expected-approach-using-sliding-window-ontime-and-o1-auxiliary-space

Examples: 

Input: arr[] = { 15, 2, 4, 8, 9, 5, 10, 23}, sum = 23
Output: 2 5
Explanation: Sum of elements between indices 2 and 5 is 2 + 4 + 8 + 9 = 23

Input: arr[] = {1, 4, 0, 0, 3, 10, 5}, sum = 7
Output: 2 5
Explanation: Sum of elements between indices 1 and 4 is 4 + 0 + 0 + 3 = 7

Input: arr[] = {1, 4}, sum = 0
Output: -1
Explanation: There is no subarray with 0 sum

public class Test {
    public static void main(String[] args) {
        int []arr = {1, 4, 0, 0, 3, 10, 5};
        int k = 7;
        int sum = arr[0];
        for(int st=-0, en=1; en<arr.length ; st++, en++){

            if(sum == k){
                en--;
                System.out.println(st +","+ en);
                return;
            }
            while(sum != k){
                if(sum > k){
                    sum -= arr[st];
                    st++;
                }
                if(sum < k){
                    sum += arr[en];
                    en++;
                }
            }
        }
    }
}