Maximum Subarray

Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

https://leetcode.com/problems/maximum-subarray/description/
-----------------------------------------------------------------------------------------------

Kadane Algorithm Used

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int curSum = 0 , finalAns = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ; ++i){
            curSum += nums[i];
            finalAns = Math.max(finalAns , curSum);
            if(curSum < 0){
                curSum = 0;
            }
        }
        return finalAns;
    }
}


nice explanation:

// The technique is called Kadane's Algorithm
// Time: O(N)
// Space: O(1)

class Solution {
    public int maxSubArray(int[] nums) {
        int cur_sum = 0, final_ans = Integer.MIN_VALUE;

        // Try to find the maximum subarray sum
        // out of all the subarrays ending at index i
        for(int i = 0; i < nums.length; ++i) {
            cur_sum += nums[i];
            final_ans = Math.max(final_ans, cur_sum);

            // If less than 0, the current window
            // can be discarded because it's not
            // going to help the future windows.
            if(cur_sum < 0)
                cur_sum = 0;
        }

        return final_ans;
    }
}