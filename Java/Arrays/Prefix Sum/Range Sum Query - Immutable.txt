Range Sum Query - Immutable
Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 
Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= left <= right < nums.length
At most 104 calls will be made to sumRange

https://leetcode.com/problems/range-sum-query-immutable/description/
-----------------------------------------------------------------------------------------
Topic : Prefix sum ..may be solved using DP
// Precomputation: O(N)
// Time per query: O(1)
// Overall time: O(N + Q)
// Overall Space: O(N)
class NumArray {
    int preSum[];

    // Make the prefix sum array in the constructor
    public NumArray(int[] nums) {
        preSum = new int[nums.length];
        for(int i = 0; i < preSum.length; ++i)
            preSum[i] = i == 0? nums[0] : preSum[i - 1] + nums[i];
    }
    
    // Now, sum[l....r] is simply equal to preSum[r] - preSum[l-1]
    public int sumRange(int left, int right) {
        if(left == 0)
            return preSum[right];

        return preSum[right] - preSum[left - 1];
    }
}
