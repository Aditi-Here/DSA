Maximum average subarray

You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

 

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
Example 2:

Input: nums = [5], k = 1
Output: 5.00000
 

Constraints:

n == nums.length
1 <= k <= n <= 105
-104 <= nums[i] <= 104

------------------------------------------------------------------------------------------------------------------------------------------------
my code: class Solution {
    public double findMaxAverage(int[] nums, int k) {
        long sum = 0;
        int len = nums.length;
        for(int i = 0 ; i < k ; ++i){
            sum += nums[i];
        }
        double max = sum;
        for(int i = k,j = 0 ; i < len; ++i,++j){
            sum += nums[i];
            sum -= nums[j];
            max = (max>sum)?max:sum;
        }
        double ans = max/k;
        return ans;
    }
}

*********************************************************

Q2 - Maximum Average Subarray I
Question Link: https://leetcode.com/problems/maximum-average-subarray-i/description/

Time Complexity: O(n)
Space Complexity O(1) - (Ignoring the space taken up by input array)
*/

import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		int[] arr = new int[n];
		for(int i=0 ; i<n ; i++) arr[i] = sc.nextInt();
		Solution obj = new Solution();
		System.out.print(obj.findMaxAverage(arr, k));
    }
}

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;
		
		//Finding max average is equivalent to finding max sum
		int maxSum = Integer.MIN_VALUE;
		int currSum = 0;
		for(int i=0 ; i<k ; i++) {
			currSum += nums[i];
		}	
		maxSum = Math.max(maxSum, currSum);
		for(int i=k ; i<n ; i++) {
			currSum += nums[i];
			currSum -= nums[i-k];
			maxSum = Math.max(maxSum, currSum);
		}

		double ans = (1.0)*maxSum/k;
		return ans;
    }
}
