/*
Q1 - Modify the Matrix
Question Link - https://leetcode.com/problems/modify-the-matrix/description/
Time Complexity - O(m*(n+n)) ~ O(n*m)
Space Complexity - O(1) (ignoring the space occupied by the input matrix) 
*/

import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int[][] matrix = new int[n][m];
		for(int i=0 ; i<n ; i++) {
			for(int j=0 ; j<m ; j++)
				matrix[i][j] = sc.nextInt();
		}
		Solution obj = new Solution();
		int[][] ans = obj.modifiedMatrix(matrix);
		for(int i=0 ; i<n ; i++) {
			for(int j=0 ; j<m ; j++) System.out.print(ans[i][j] + " ");
			System.out.println();
		}
    }
}

class Solution {
    public int[][] modifiedMatrix(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
		for(int j=0 ; j<m ; j++) {
			int currMax = -1;
			for(int i=0 ; i<n ; i++) currMax = Math.max(currMax, matrix[i][j]);
			for(int i=0 ; i<n ; i++) {
				if(matrix[i][j] < 0) matrix[i][j] = currMax;
			}
		}
		return matrix;
    }
}