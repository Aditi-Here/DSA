25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

https://leetcode.com/problems/reverse-nodes-in-k-group/description/
-------------------------------------------------------------------------------------------------------------

class Solution {
    void reverse(ListNode head, ListNode tail) {
        // We just need to reverse the connections
        ListNode cur = head, prev = null;
        while(cur != tail) {
            ListNode originalNextNode = cur.next;
            cur.next = prev; // Connection reversed
            
            // Move ahead
            prev = cur;
            cur = originalNextNode;
        }

        // Correct the connection for tail as well
        cur.next = prev;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k == 1 || head == null || head.next == null)
            return head;

        // Find [beg, end] such that beg points to
        // 1st node and end points to kth node
        ListNode beg = head, end = head;

        // Go ahead k-1 times to go to the kth node (1-based)
        for(int i = 0; i < k - 1; ++i) {
            end = end.next;

            // If less than k nodes available, do nothing
            if(end == null)
                return head;
        }

        // Get the head of further k-groups in reversed order
        ListNode nextHead = reverseKGroup(end.next, k);

        // Now, reverse the current k-group, and make relevant connection
        reverse(beg, end);
        beg.next = nextHead;
        
        return end;
    }
}
