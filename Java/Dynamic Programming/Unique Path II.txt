// Link : https://leetcode.com/problems/unique-paths-ii/
// Time & Space : O(M*N)

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];

        // Handle the first row
        for(int i = 0, j = 0; j < n; ++j) {
            if(obstacleGrid[i][j] == 1)
                break;
            dp[i][j] = 1;
        }

        // Handle the first column
        for(int i = 0, j = 0; i < m; ++i) {
            if(obstacleGrid[i][j] == 1)
                break;
            dp[i][j] = 1;
        }

        for(int i = 1; i < m; ++i)
            for(int j = 1; j < n; ++j) {
                if(obstacleGrid[i][j] == 1)
                    continue; // dp[i][j] is already 0.
                dp[i][j] = (i == 0 || j == 0)? 1 : dp[i-1][j] + dp[i][j-1];
            }
        
        return dp[m-1][n-1];
    }
}