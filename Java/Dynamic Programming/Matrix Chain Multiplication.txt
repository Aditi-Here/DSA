Matrix Chain Multiplication

https://www.geeksforgeeks.org/problems/matrix-chain-multiplication0303/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

// Time : O(N^3)

-----------------------------------------------------------------------------------
class Solution {
    int dp[][];
    int matrixMultiplicationHelper(int arr[], int i, int j){
        if(i >= j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        dp[i][j] = Integer.MAX_VALUE;
        for(int k = i; k < j; ++k) {
            int furtherCost = matrixMultiplicationHelper(arr, i, k) + 
            matrixMultiplicationHelper(arr, k + 1, j);
            int curCost = arr[i-1]*arr[k]*arr[j];
            dp[i][j] = Math.min(dp[i][j], curCost + furtherCost);
        }
        return dp[i][j];
        
    }
    int matrixMultiplication(int arr[]) {
        // code here
        int N = arr.length;
        int n = N - 1;
        dp = new int[N][N];
        for(int row[] : dp){
            Arrays.fill(row, -1);
        }
        return matrixMultiplicationHelper(arr, 1 , n);
    }
}

---------------------------------------------------------------------------------

Bottom Up Approach

class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        int n = N - 1;
        int dp[][] = new int[105][105];
        for(int len = 1; len <= n; ++len) {
            for(int i = 1, j = len; i <= n && j <= n; ++i, ++j) {
                if(i == j) {
                    dp[i][j] = 0;
                    continue;
                }
                dp[i][j] = Integer.MAX_VALUE;
                for(int k = i; k < j; ++k) {
                    int curCost = arr[i-1]*arr[k]*arr[j];
                    int recurCost = dp[i][k] + dp[k+1][j];
                    dp[i][j] = Math.min(dp[i][j], curCost + recurCost);
                }
            }
        }
        return dp[1][n];
    }
}