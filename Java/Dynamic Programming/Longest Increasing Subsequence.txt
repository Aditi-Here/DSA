https://leetcode.com/problems/longest-increasing-subsequence/description/

------------------------------------------------------------------------
Approach 1 :

class Solution {
    public int lengthOfLISHelper(int[] nums, int[] dp) {
        for(int i = 1; i < nums.length ; i++){
            for(int j = 0; j < i ; j++){
                if((nums[i] > nums[j]) && (dp[i] < (dp[j]+1))){
                    dp[i] = dp[j] + 1;
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for(int m = 0 ; m < nums.length ; m++){
            max = (max > dp[m])? max : dp[m];
        }
        return max;
    }
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp,1);
        return lengthOfLISHelper(nums,dp);
    }
}


--------------------------------------------------------------------------------
Approach 2:

T : O(N)
S: O(N)

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int []dp = new int[n];
        Arrays.fill(dp,1);
        int lis = 0;

        for(int i = 0; i < n ; i++){
            for(int j = i-1; j >=0 ; j--){
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i] , 1 + dp[j]);
                }
            }
            lis = Math.max(dp[i] , lis);
        }
        return lis;
    }
}

---------------------------------------------------------------------
Approach 2: Better Approach

// Link : https://leetcode.com/problems/longest-increasing-subsequence/
// Time : O(NlogN)

class Solution {
    int lowerBound(int dp[], int val) {
        int beg = 0, end = dp.length - 1, ans = -1;
        while(beg <= end) {
            int mid = (beg + end)/2;
            if(dp[mid] >= val) {
                ans = mid;
                end = mid-1;
            }
            else {
                beg = mid + 1;
            }
        }
        return ans;
    }

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = Integer.MIN_VALUE;
        for(int i = 0; i < n; ++i) {
            int id = lowerBound(dp, nums[i]);
            if(id != -1)
                dp[id] = nums[i];
        }

        int ans = 1;
        while(ans < n && dp[ans+1] < Integer.MAX_VALUE)
            ans += 1;

        return ans; // largest id s.t. dp[id] != inf;
    }
}
