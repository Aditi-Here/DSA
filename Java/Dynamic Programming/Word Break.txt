https://leetcode.com/problems/word-break/description/?envType=study-plan-v2&envId=top-interview-150

Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.


------------------------------------------------------------------------------------..
dp:

class Solution {
    boolean wordBreakHelper(String s, List<String> wordDict) {
        if(s.isEmpty()) return true;
        int len = s.length();
        boolean []dp = new boolean[len+1];
        for(int i = 1; i<= len ; i++){
            String pre = s.substring(0,i);
            if(wordDict.contains(pre) && dp[i]==false){
                dp[i] = true;
            }
            if(dp[i] == true){
                if(i == len){
                    return true;
                }
                for(int j=i+1; j <=len; j++){
                    if(dp[j] == false && wordDict.contains(s.substring(i,j))){
                        dp[j] = true;
                    }
                    if(j == len && dp[j] == true) return true;
                }
            }
            
        }
        return false;
    }
    public boolean wordBreak(String s, List<String> wordDict) {
        return wordBreakHelper(s, wordDict);
    }
}


recursion:
class Solution {
    boolean wordBreakHelper(String s, List<String> wordDict) {
        if(s.isEmpty()) return true;
        int len = s.length();
        for(int i = 1; i<= len ; i++){
            String pre = s.substring(0,i);
            if(wordDict.contains(pre) && wordBreakHelper(s.substring(i) , wordDict)){
                return true;
            }
        }
        return false;
    }
    public boolean wordBreak(String s, List<String> wordDict) {
        return wordBreakHelper(s, wordDict);
    }
}
