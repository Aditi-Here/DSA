https://leetcode.com/problems/min-cost-climbing-stairs/description/?envType=problem-list-v2&envId=dynamic-programming

DP: TC : O(N), SC: O(N)

class Solution {
    int dp[];
    int minCost(int[] cost, int i){
        if (i == 0 || i == 1) {
            return cost[i];
        }
        if(dp[i] != -1) return dp[i];
        return dp[i] = cost[i] + Math.min(minCost(cost, i-1), minCost(cost, i-2)); 
    }
    public int minCostClimbingStairs(int[] cost) {
        dp = new int[cost.length+1];
        Arrays.fill(dp , -1);
        int n = cost.length;
        if(n == 1) return cost[0];
        return Math.min(minCost(cost,n-1), minCost(cost, n-2));
    }
}

Bottom Up:  TC : O(N), SC: O(N)

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;    
        if (n == 1) return cost[0];    
        int[] dp = new int[n];
        dp[0] = cost[0];
        dp[1] = cost[1];      
        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
        }
        return Math.min(dp[n - 1], dp[n - 2]);
    }
}



Another 
TC: O(N^2)

// Java program to count number of
// ways to reach nth stair.
import java.util.*;

class GfG {

    static int minCostRecur(int i, int[] cost) {
        
        // Base case
        if (i == 0 || i == 1) {
            return cost[i];
        }
        
        return cost[i] + Math.min(minCostRecur(i - 1, cost), 
        minCostRecur(i - 2, cost));
    }

    static int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        
        if (n == 1) return cost[0];
        
        // Return minimum of cost to  
        // reach (n-1)th stair and  
        // cost to reach (n-2)th stair
        return Math.min(minCostRecur(n - 1, cost), 
                        minCostRecur(n - 2, cost));
    }

    public static void main(String[] args) {
        int[] cost = { 16, 19, 10, 12, 18 };
        System.out.println(minCostClimbingStairs(cost));
    }
}

