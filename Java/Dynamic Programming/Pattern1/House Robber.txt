https://leetcode.com/problems/house-robber/description/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

---------------------------------------------------------------------
Recurssion T(2^n)

class Solution {
    int robHelper(int[] nums, int i){
        if(i >= nums.length) return 0;
        int op1 = 0, op2 = 0;
        // to take it
        op1 += nums[i];
        op1 += robHelper(nums, i+2);
        // to leave it
        op2 += robHelper(nums, i+1);
        return Math.max(op1, op2); 
    }
    public int rob(int[] nums) {   
        return robHelper(nums , 0); 
}
}

dp
Top Down
Time : O(N)
// Space : O(N)

class Solution {
    int dp[];
    int robHelper(int[] nums, int i, int[] dp){
        if(i >= nums.length) return 0;
        if(dp[i] != -1) return dp[i];
        int op1 = 0, op2 = 0;
        // to take it
        op1 += nums[i];
        op1 += robHelper(nums, i+2,dp);
        // to leave it
        op2 += robHelper(nums, i+1, dp);
        return dp[i] = Math.max(op1, op2); 
    }
    public int rob(int[] nums) { 
        int []dp = new int[nums.length + 2];
        Arrays.fill(dp,-1);  
        return robHelper(nums , 0, dp); 
}
}


Note:   dp size can take n+1, but just for simplicity take n+2, even more size can also be fine, eg. n+9 etc.


Bottom Up
// Time : O(N)
// Space : O(N)

class Solution { // bottom up
    public int rob(int[] nums) {
        if(nums.length == 0)
            return 0;
        if(nums.length == 1)
            return nums[0];
    
        // dp[n] represents answer for the first
        // n elements i.e. index range [0, n - 1]
        int dp[] = new int[nums.length+1];

        dp[1] = nums[0];
        dp[2] = Math.max(nums[0], nums[1]);

        for(int n = 3; n <= nums.length; ++n) {

            // Let nums[n-1] be our last chosen house
            int poss1 = nums[n-1] + dp[n-2];

            // Let nums[n-2] be our last chosen house
            int poss2 = nums[n-2] + dp[n-3];

            dp[n] = Math.max(poss1, poss2);
        }

        return dp[nums.length];
    }
}