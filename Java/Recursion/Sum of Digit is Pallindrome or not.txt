Sum of Digit is Pallindrome or not
Difficulty: BasicAccuracy: 45.75%Submissions: 65K+Points: 1
Given a number n.Find if the digit sum(or sum of digits) of n is a Palindrome number or not.

Note: A Palindrome number is a number that stays the same when reversed. Example- 121 , 131 , 7 etc.

Example 1:

Input:
n = 56
Output: 1
Explanation:
The digit sum of 56 is 5+6=11.Since, 11 is a palindrome number.Thus, answer is 1.
Example 2:

Input:
n = 98
Output: 0
Explanation:
The digit sum of 98 is 9+8=17. Since 17 is not a palindrome,thus, answer is 0.
Your Task:
You don't need to read input or print anything.Your Task is to complete the function isDigitSumPalindrome() which takes a number n as input parameter and returns 1 if the Digit sum of n is a palindrome. Otherwise, it returns 0.

Expected Time Complexity: O(log(n))
Expected Auxillary Space: O(1)

Constraints:
1 <= n <= 109

https://www.geeksforgeeks.org/problems/sum-of-digit-is-pallindrome-or-not2751/1
-------------------------------------------------------
class Solution {
    int sumCal(int n ,int sum){
        if(n <= 0) {
            return 0;
        }
        int s = n%10;
        sum += s;
        int p = n/10;
        sumCal(p, sum);
        return sum;
    }
    int palindromeCheck(int sum){
        int l = 0;
        String s = Integer.toString(sum);
        int r = s.length()-1;
        while(l >= r){
            if(s.charAt(l) != s.charAt(r)){
                return 0;
            }
        }
        return 1;
    }
    int isDigitSumPalindrome(int n) {
        // code here
        Solution s = new Solution();
        int sum = 0;
        int ansSum = sumCal(n ,sum);
        return palindromeCheck(ansSum);
    }
}

Other Approach

 First we can calculate its sum of digits and then we  reverse  this number 
  and if number is equal to its reverse then it is palindrome otherwise not.


// User function Template for Java
class Solution {
    int reverseNum ;
    int sumOfDigits(int n) {
        if (n == 0)
            return 0;
		// suppose number is 178 the we do  (178%10)+sumOfDigits(178/10)
		// =(8)+sumOfDigits(17);then again we sumOfDigits call for (17). 
        return (n % 10) + sumOfDigits(n / 10);
    }
    
    void reverseNumber(int num) {
        if (num == 0)
            return;
		
        int lastDigit = num % 10;
        reverseNum=(reverseNum*10)+lastDigit;
        reverseNumber(num / 10);
    }
/*
Take an example input of 197:
1. reverseNumber(197) calls reverseNumber(19) and reverseNum will be 7
2. reverseNumber(19) calls reverseNumber(1) and reverseNum will be 79
3. reverseNumber(1) calls reverseNumber(0) and reverseNum will be 791
4. reverseNumber(0) hits the base case and returns.
*/
    
    int isDigitSumPalindrome(int N) {
        int sumdig = sumOfDigits(N);
         reverseNum =0;
        reverseNumber(sumdig);
        if (sumdig == reverseNum)
            return 1;
        return 0;
    }
}

