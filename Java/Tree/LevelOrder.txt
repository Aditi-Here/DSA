
-------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Link : https://leetcode.com/problems/binary-tree-level-order-traversal/

-------------------------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return new ArrayList<>();
        List<List<Integer>> levelOrderList = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(queue.size() > 0){
            int levelSize = queue.size();
            List<Integer> ans = new ArrayList<>();
            for(int i = 0 ; i < levelSize ; i++){
                TreeNode node = queue.poll();
                ans.add(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            levelOrderList.add(ans);
        }
        return levelOrderList;
    }
}