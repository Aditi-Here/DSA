https://leetcode.com/problems/subtree-of-another-tree/description/
----------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    static boolean areIdentical(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 == null)
            return true;
        if (root1 == null || root2 == null)
            return false;

        // Check if data and left/right subtrees are identical
        return (root1.val == root2.val &&
                areIdentical(root1.left, root2.left) &&
                areIdentical(root1.right, root2.right));
    }

    // Function to check if root2 is a subtree of root1
    
    public boolean isSubtree(TreeNode root1, TreeNode root2) {
        if (root2 == null)
            return true;
        if (root1 == null)
            return false;

        // Check if the current node of root1 matches the root of root2
        if (areIdentical(root1, root2))
            return true;

        // Recur for left and right subtrees of root1
        return isSubtree(root1.left, root2)
                || isSubtree(root1.right, root2);
    }
}